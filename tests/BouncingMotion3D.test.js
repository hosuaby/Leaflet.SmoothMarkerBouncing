import test from 'ava';
import L, {Point} from 'leaflet';
import BouncingOptions from '../src/BouncingOptions';
import BouncingMotion3D from '../src/BouncingMotion3D';

test('Test calculate icon move transforms', t => {

    // Given
    const x = 100;
    const y = 100;
    const bounceHeight = 15;

    // When
    const transforms = BouncingMotion3D.calculateIconMoveTransforms(x, y, bounceHeight);

    // Then
    t.deepEqual(transforms, [
        ' matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,100,100,0,1) ',
        ' matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,100,99,0,1) ',
        ' matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,100,98,0,1) ',
        ' matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,100,97,0,1) ',
        ' matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,100,96,0,1) ',
        ' matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,100,95,0,1) ',
        ' matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,100,94,0,1) ',
        ' matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,100,93,0,1) ',
        ' matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,100,92,0,1) ',
        ' matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,100,91,0,1) ',
        ' matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,100,90,0,1) ',
        ' matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,100,89,0,1) ',
        ' matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,100,88,0,1) ',
        ' matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,100,87,0,1) ',
        ' matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,100,86,0,1) ',
        ' matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,100,85,0,1) '
    ]);
});

test('Test calculate icon resize transforms', t => {

    // Given
    const x = 100;
    const y = 100;
    const height = 41;
    const contractHeight = 12;

    // When
    const transforms = BouncingMotion3D.calculateIconResizeTransforms(x, y, height, contractHeight);

    // Then
    t.deepEqual(transforms, [
        ' matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,100,100,0,1) ',
        ' matrix3d(1,0,0,0,0,0.975609756097561,0,0,0,0,1,0,100,101,0,1) ',
        ' matrix3d(1,0,0,0,0,0.9512195121951219,0,0,0,0,1,0,100,102,0,1) ',
        ' matrix3d(1,0,0,0,0,0.926829268292683,0,0,0,0,1,0,100,103,0,1) ',
        ' matrix3d(1,0,0,0,0,0.9024390243902439,0,0,0,0,1,0,100,104,0,1) ',
        ' matrix3d(1,0,0,0,0,0.8780487804878049,0,0,0,0,1,0,100,105,0,1) ',
        ' matrix3d(1,0,0,0,0,0.8536585365853658,0,0,0,0,1,0,100,106,0,1) ',
        ' matrix3d(1,0,0,0,0,0.8292682926829268,0,0,0,0,1,0,100,107,0,1) ',
        ' matrix3d(1,0,0,0,0,0.8048780487804879,0,0,0,0,1,0,100,108,0,1) ',
        ' matrix3d(1,0,0,0,0,0.7804878048780488,0,0,0,0,1,0,100,109,0,1) ',
        ' matrix3d(1,0,0,0,0,0.7560975609756098,0,0,0,0,1,0,100,110,0,1) ',
        ' matrix3d(1,0,0,0,0,0.7317073170731707,0,0,0,0,1,0,100,111,0,1) ',
        ' matrix3d(1,0,0,0,0,0.7073170731707317,0,0,0,0,1,0,100,112,0,1) '
    ]);
});

test('Test calculate shadow move transforms with angle', t => {

    // Given
    const x = 100;
    const y = 100;
    const bounceHeight = 15;
    const angle = - Math.PI / 4;

    // When
    const transforms = BouncingMotion3D.calculateShadowMoveTransforms(x, y, bounceHeight, angle);

    // Then
    t.deepEqual(transforms, [
        ' matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,100,100,0,1) ',
        ' matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,101,99,0,1) ',
        ' matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,102,98,0,1) ',
        ' matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,103,97,0,1) ',
        ' matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,104,96,0,1) ',
        ' matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,105,95,0,1) ',
        ' matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,106,94,0,1) ',
        ' matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,107,93,0,1) ',
        ' matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,108,92,0,1) ',
        ' matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,109,91,0,1) ',
        ' matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,110,90,0,1) ',
        ' matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,111,89,0,1) ',
        ' matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,112,88,0,1) ',
        ' matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,113,87,0,1) ',
        ' matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,114,86,0,1) ',
        ' matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,115,85,0,1) '
    ]);
});

test('Test calculate shadow move transforms without angle', t => {

    // Given
    const x = 100;
    const y = 100;
    const bounceHeight = 15;

    // When
    const transforms = BouncingMotion3D.calculateShadowMoveTransforms(x, y, bounceHeight);

    // Then
    t.deepEqual(transforms, [
        ' matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,100,100,0,1) ',
        ' matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,100,100,0,1) ',
        ' matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,100,100,0,1) ',
        ' matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,100,100,0,1) ',
        ' matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,100,100,0,1) ',
        ' matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,100,100,0,1) ',
        ' matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,100,100,0,1) ',
        ' matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,100,100,0,1) ',
        ' matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,100,100,0,1) ',
        ' matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,100,100,0,1) ',
        ' matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,100,100,0,1) ',
        ' matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,100,100,0,1) ',
        ' matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,100,100,0,1) ',
        ' matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,100,100,0,1) ',
        ' matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,100,100,0,1) ',
        ' matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,100,100,0,1) '
    ]);
});

// TODO: code this test
test('Test calculate shadow resize transforms with angle', t => {

    // Given

    // When

    // Then
    t.pass();
});

// TODO: code this test
test('Test calculate shadow resize transforms without angle', t => {

    // Given

    // When

    // Then
    t.pass();
});

test('Test new 3D bouncing motion', t => {

    // Given
    const div = document.createElement('div');
    const map = L.map(div).setView([48.847547, 2.351074], 14);
    const marker = L.marker([48.847547, 2.351074]).addTo(map);
    const position = new Point(100, 100);
    const options = new BouncingOptions();

    // When
    const motion = new BouncingMotion3D(marker, position, options);

    // Then
    t.deepEqual(motion.iconMoveTransforms, [
        ' matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,100,100,0,1) ',
        ' matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,100,99,0,1) ',
        ' matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,100,98,0,1) ',
        ' matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,100,97,0,1) ',
        ' matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,100,96,0,1) ',
        ' matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,100,95,0,1) ',
        ' matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,100,94,0,1) ',
        ' matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,100,93,0,1) ',
        ' matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,100,92,0,1) ',
        ' matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,100,91,0,1) ',
        ' matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,100,90,0,1) ',
        ' matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,100,89,0,1) ',
        ' matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,100,88,0,1) ',
        ' matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,100,87,0,1) ',
        ' matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,100,86,0,1) ',
        ' matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,100,85,0,1) '
    ]);

    t.deepEqual(motion.iconResizeTransforms, [
        ' matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,100,100,0,1) ',
        ' matrix3d(1,0,0,0,0,0.975609756097561,0,0,0,0,1,0,100,101,0,1) ',
        ' matrix3d(1,0,0,0,0,0.9512195121951219,0,0,0,0,1,0,100,102,0,1) ',
        ' matrix3d(1,0,0,0,0,0.926829268292683,0,0,0,0,1,0,100,103,0,1) ',
        ' matrix3d(1,0,0,0,0,0.9024390243902439,0,0,0,0,1,0,100,104,0,1) ',
        ' matrix3d(1,0,0,0,0,0.8780487804878049,0,0,0,0,1,0,100,105,0,1) ',
        ' matrix3d(1,0,0,0,0,0.8536585365853658,0,0,0,0,1,0,100,106,0,1) ',
        ' matrix3d(1,0,0,0,0,0.8292682926829268,0,0,0,0,1,0,100,107,0,1) ',
        ' matrix3d(1,0,0,0,0,0.8048780487804879,0,0,0,0,1,0,100,108,0,1) ',
        ' matrix3d(1,0,0,0,0,0.7804878048780488,0,0,0,0,1,0,100,109,0,1) ',
        ' matrix3d(1,0,0,0,0,0.7560975609756098,0,0,0,0,1,0,100,110,0,1) ',
        ' matrix3d(1,0,0,0,0,0.7317073170731707,0,0,0,0,1,0,100,111,0,1) ',
        ' matrix3d(1,0,0,0,0,0.7073170731707317,0,0,0,0,1,0,100,112,0,1) '
    ]);

    t.deepEqual(motion.shadowMoveTransforms, [
        ' matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,100,100,0,1) ',
        ' matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,101,99,0,1) ',
        ' matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,102,98,0,1) ',
        ' matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,103,97,0,1) ',
        ' matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,104,96,0,1) ',
        ' matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,105,95,0,1) ',
        ' matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,106,94,0,1) ',
        ' matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,107,93,0,1) ',
        ' matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,108,92,0,1) ',
        ' matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,109,91,0,1) ',
        ' matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,110,90,0,1) ',
        ' matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,111,89,0,1) ',
        ' matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,112,88,0,1) ',
        ' matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,113,87,0,1) ',
        ' matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,114,86,0,1) ',
        ' matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,115,85,0,1) '
    ]);

    t.deepEqual(motion.shadowResizeTransforms, [
        ' matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,100,100,0,1) ',
        ' matrix3d(1,0,0,0,0,0.975609756097561,0,0,0,0,1,0,100,101,0,1) ',
        ' matrix3d(1,0,0,0,0,0.9512195121951219,0,0,0,0,1,0,100,102,0,1) ',
        ' matrix3d(1,0,0,0,0,0.926829268292683,0,0,0,0,1,0,100,103,0,1) ',
        ' matrix3d(1,0,0,0,0,0.9024390243902439,0,0,0,0,1,0,100,104,0,1) ',
        ' matrix3d(1,0,0,0,0,0.8780487804878049,0,0,0,0,1,0,100,105,0,1) ',
        ' matrix3d(1,0,0,0,0,0.8536585365853658,0,0,0,0,1,0,100,106,0,1) ',
        ' matrix3d(1,0,0,0,0,0.8292682926829268,0,0,0,0,1,0,100,107,0,1) ',
        ' matrix3d(1,0,0,0,0,0.8048780487804879,0,0,0,0,1,0,100,108,0,1) ',
        ' matrix3d(1,0,0,0,0,0.7804878048780488,0,0,0,0,1,0,100,109,0,1) ',
        ' matrix3d(1,0,0,0,0,0.7560975609756098,0,0,0,0,1,0,100,110,0,1) ',
        ' matrix3d(1,0,0,0,0,0.7317073170731707,0,0,0,0,1,0,100,111,0,1) ',
        ' matrix3d(1,0,0,0,0,0.7073170731707317,0,0,0,0,1,0,100,112,0,1) '
    ]);
});
